// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package app

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MicroAppClient is the client API for MicroApp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MicroAppClient interface {
	// Sends a greeting
	SayHello(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*HelloResp, error)
}

type microAppClient struct {
	cc grpc.ClientConnInterface
}

func NewMicroAppClient(cc grpc.ClientConnInterface) MicroAppClient {
	return &microAppClient{cc}
}

func (c *microAppClient) SayHello(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*HelloResp, error) {
	out := new(HelloResp)
	err := c.cc.Invoke(ctx, "/app.MicroApp/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MicroAppServer is the server API for MicroApp service.
// All implementations must embed UnimplementedMicroAppServer
// for forward compatibility
type MicroAppServer interface {
	// Sends a greeting
	SayHello(context.Context, *HelloReq) (*HelloResp, error)
	mustEmbedUnimplementedMicroAppServer()
}

// UnimplementedMicroAppServer must be embedded to have forward compatible implementations.
type UnimplementedMicroAppServer struct {
}

func (UnimplementedMicroAppServer) SayHello(context.Context, *HelloReq) (*HelloResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedMicroAppServer) mustEmbedUnimplementedMicroAppServer() {}

// UnsafeMicroAppServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MicroAppServer will
// result in compilation errors.
type UnsafeMicroAppServer interface {
	mustEmbedUnimplementedMicroAppServer()
}

func RegisterMicroAppServer(s grpc.ServiceRegistrar, srv MicroAppServer) {
	s.RegisterService(&MicroApp_ServiceDesc, srv)
}

func _MicroApp_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroAppServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.MicroApp/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroAppServer).SayHello(ctx, req.(*HelloReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MicroApp_ServiceDesc is the grpc.ServiceDesc for MicroApp service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MicroApp_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "app.MicroApp",
	HandlerType: (*MicroAppServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _MicroApp_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/app.proto",
}
